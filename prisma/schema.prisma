datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "../app/_schemas" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  // ID of each user stored inside our Stripe.
  customerId    String
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  stores        Store[]
}

enum Plan {
  Starter
  Pro
}

enum ProductType {
  Recurring
  Lifetime
  Rental
  Free
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Store {
  /// @zod.optional()
  id String @id

  /// @zod.min(1, { message: "Your store name can't be empty." }).max(32, {message: "Your store name can't be longer than 32 characters."})
  name String

  /// @zod.max(256, { message: "Your description can't be longer than 256 characters." })
  description String

  /// @zod.optional()
  domain String

  stripeId String

  plan Plan

  /// @zod.optional()
  owner   String
  User    User      @relation(fields: [owner], references: [id])
  Product Product[]
  License License[]

  @@index([owner])
}

model Product {
  id          String      @id
  name        String
  type        ProductType @default(Recurring)
  archived    Boolean     @default(false)
  description String?
  price       String?
  currency    String?

  // Per month, year, week, etc.. Only active if recurring.
  recurrencyPeriod String?

  // Stripe hosted equivelant of this product.
  stripeProductId String

  // Length of total customers
  customers Int @default(0)

  storeId String
  Store   Store     @relation(fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  License License[]

  @@index(storeId)
}

model License {
  id    String @id
  email String
  key   String

  store     Store   @relation(fields: [storeId], references: [id])
  storeId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@index([productId, storeId])
}

enum CancelAction {
  Kick
  RemoveRoles
}

model DiscordIntegration {
  id String @id @default(cuid())

  guildId       String
  cancelAction  CancelAction
  pastDueAction CancelAction
  // roles
}
